# Task ID: 8
# Title: Develop IDE plugins
# Status: pending
# Dependencies: 5, 6
# Priority: medium
# Description: Build extensions for VS Code, Cursor, and Windsurf that enable searching, installing, and opening MCP servers.
# Details:
Create VS Code extension with TypeScript. Implement mcp.search command with side panel results. Build mcp.install command to inject mcp.json in workspace. Create mcp.open-in-ide command for deep-linking. Implement similar functionality for Cursor and Windsurf. Create authentication flow for IDE plugins. Build common library for shared functionality across plugins. Implement deep link URI scheme handlers according to Appendix B.

# Test Strategy:
Unit tests for plugin commands. Integration tests with mock IDE environments. End-to-end tests for complete workflows. User testing with different IDEs. Verify deep-link functionality across platforms.

# Subtasks:
## 1. Create shared library for IDE plugins [pending]
### Dependencies: None
### Description: Develop a common TypeScript library that will be used across all IDE plugins to avoid code duplication and ensure consistent functionality.
### Details:
Build a TypeScript library that handles: API communication with MCP servers, authentication token management, search result formatting, and installation utilities. Export interfaces for search results, server configurations, and authentication responses. Implement utility functions for validating server configurations and formatting search results. Package as an npm module that can be imported by each IDE plugin.

## 2. Implement authentication flow module [pending]
### Dependencies: 8.1
### Description: Create a reusable authentication module that handles user login, token storage, and refresh mechanisms for all IDE plugins.
### Details:
Using the shared library, implement OAuth2 authentication flow. Create functions to initiate login, handle callbacks, securely store tokens in IDE-specific secure storage, refresh expired tokens, and handle logout. Implement appropriate error handling for authentication failures. Design the module to work with VS Code's SecretStorage, and equivalent mechanisms in Cursor and Windsurf.

## 3. Develop VS Code extension core functionality [pending]
### Dependencies: 8.1, 8.2
### Description: Create the foundation for the VS Code extension with the three main commands: search, install, and open.
### Details:
Initialize VS Code extension project with TypeScript. Register the three commands: mcp.search, mcp.install, and mcp.open-in-ide. Implement mcp.search to display results in a WebView panel with proper formatting and pagination. Build mcp.install to inject mcp.json into the current workspace with proper error handling. Create mcp.open-in-ide to handle deep-linking according to Appendix B specifications. Add appropriate context menu integration points.

## 4. Implement Cursor IDE plugin [pending]
### Dependencies: 8.1, 8.2, 8.3
### Description: Adapt the VS Code extension to work with Cursor IDE, accounting for any API differences.
### Details:
Fork the VS Code extension codebase for Cursor compatibility. Identify and modify VS Code-specific APIs that differ in Cursor. Test and ensure the three main commands work properly in Cursor. Update authentication flow if needed for Cursor-specific requirements. Package the extension according to Cursor's distribution guidelines.

## 5. Implement Windsurf IDE plugin [pending]
### Dependencies: 8.1, 8.2
### Description: Create the Windsurf extension with equivalent functionality to the VS Code and Cursor plugins.
### Details:
Research Windsurf extension API and development patterns. Implement the three core commands using the shared library components. Create Windsurf-specific UI components for search results display. Adapt the authentication flow for Windsurf's security model. Package the extension according to Windsurf's distribution requirements.

## 6. Implement deep link URI scheme handlers [pending]
### Dependencies: 8.3, 8.4, 8.5
### Description: Create URI scheme handlers for all three IDE plugins to enable deep linking from external applications.
### Details:
Implement URI scheme handlers according to Appendix B specifications. Register custom URI protocols for each IDE (vscode://mcp/, cursor://mcp/, windsurf://mcp/). Create handlers for different URI patterns including server opening, search queries, and specific resource access. Test deep linking from browsers and other applications. Ensure proper error handling for malformed URIs.

## 7. Create comprehensive documentation and publish extensions [pending]
### Dependencies: 8.3, 8.4, 8.5, 8.6
### Description: Document all plugin features, prepare for marketplace publication, and create user guides for all three IDE plugins.
### Details:
Create README files with installation and usage instructions for each plugin. Document all commands, keyboard shortcuts, and configuration options. Create sample screenshots and usage examples. Prepare marketplace listings with appropriate metadata, tags, and descriptions. Submit extensions to VS Code Marketplace, Cursor Extension Store, and Windsurf Plugin Repository. Create a developer guide for maintaining and extending the plugins.

