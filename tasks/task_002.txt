# Task ID: 2
# Title: Implement authentication and user management
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Build the authentication system with signup, login, and session management using JWT and secure cookies.
# Details:
Create user model with email, password hash, and role fields. Implement /signup endpoint with email verification. Build /login endpoint that returns JWT in HTTP-only secure cookies. Create /logout endpoint to invalidate sessions. Implement /me endpoint to get current user info. Add middleware for route protection based on authentication and roles. Set up password reset flow. Implement proper error handling for auth failures.

# Test Strategy:
Unit tests for user model and auth services. Integration tests for signup, login, and logout flows. Security tests for JWT implementation and cookie settings. Test role-based access control.

# Subtasks:
## 1. Create User Model and Database Schema [pending]
### Dependencies: None
### Description: Define the user data model with required fields and create the database schema
### Details:
Create a User model with fields: id (primary key), email (unique), passwordHash, role (enum: user, admin), emailVerified (boolean), verificationToken (nullable), resetPasswordToken (nullable), resetPasswordExpiry (nullable), createdAt, and updatedAt. Set up database migrations. Implement password hashing using bcrypt with appropriate salt rounds. Add validation for email format and password strength.

## 2. Implement Signup Endpoint with Email Verification [pending]
### Dependencies: 2.1
### Description: Create the user registration endpoint with email verification functionality
### Details:
Build POST /auth/signup endpoint that accepts email and password. Validate input, check for existing users, hash password, and store new user with emailVerified=false. Generate a verification token (JWT or UUID) and store it with the user. Integrate with email service to send verification email containing a link with the token. Create GET /auth/verify endpoint that validates the token and sets emailVerified=true. Add proper error handling for duplicate emails and validation failures.

## 3. Implement Login Endpoint with JWT [pending]
### Dependencies: 2.1
### Description: Create the login endpoint that authenticates users and issues JWT tokens
### Details:
Build POST /auth/login endpoint that accepts email and password. Verify credentials by comparing password hash. Check if email is verified. Generate JWT containing userId and role with appropriate expiration (15-60 minutes). Set JWT in HTTP-only, secure, SameSite=Strict cookie. Implement CSRF protection with double-submit pattern or separate CSRF token. Return user data (excluding sensitive fields) in response. Add rate limiting to prevent brute force attacks.

## 4. Implement Logout and Session Management [pending]
### Dependencies: 2.3
### Description: Create logout functionality and handle session management
### Details:
Build POST /auth/logout endpoint that clears the auth cookie. Consider implementing a token blacklist using Redis for immediate invalidation of active tokens. Add refresh token functionality with longer expiration to automatically renew JWTs. Store refresh tokens in database with user association. Create POST /auth/refresh endpoint to issue new JWTs using refresh tokens. Implement token rotation for security.

## 5. Create Authentication Middleware [pending]
### Dependencies: 2.3
### Description: Implement middleware for route protection based on authentication and roles
### Details:
Create isAuthenticated middleware that verifies JWT from cookies, handles token expiration, and attaches user to request object. Implement requireRole middleware that checks user's role against required roles for the route. Build error handling for unauthorized access with appropriate HTTP status codes (401 for unauthenticated, 403 for unauthorized). Add middleware to refresh tokens automatically when close to expiration. Test middleware with protected routes.

## 6. Implement User Profile Management [pending]
### Dependencies: 2.5
### Description: Create endpoints for retrieving and updating user information
### Details:
Build GET /auth/me endpoint protected by isAuthenticated middleware to return current user data. Implement PATCH /auth/me for updating profile information (name, email, etc.). Add validation for profile updates. Create endpoints for changing password that requires current password verification. Implement proper error handling for all user operations. Ensure sensitive data like password hash is never returned in responses.

## 7. Implement Password Reset Flow [pending]
### Dependencies: 2.1, 2.3
### Description: Create the forgot password and reset password functionality
### Details:
Build POST /auth/forgot-password endpoint that accepts email, validates user exists, generates a time-limited reset token (expires in 1 hour), and sends reset email. Create POST /auth/reset-password endpoint that verifies the reset token, accepts new password, validates password strength, updates the password hash, and invalidates the reset token. Implement security measures like rate limiting and IP logging for password reset attempts. Add comprehensive error handling with user-friendly messages that don't leak information.

