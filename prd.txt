**MCP Server Marketplace (MVP + Auth & Submission)**  
---

## 1. Document Overview  
**Purpose:**  
Centralize discovery, evaluation, and one-click installation of Model Context Protocol (MCP) servers; enforce user authentication for submissions and surveys; track analytics; integrate deeply with Web and IDE environments.  

**Scope (MVP):**  
- User authentication, registration, and session management  
- Real‑time ingestion from GitHub `awesome-mcp-servers` repo  
- RAG‑driven semantic search over manifests and READMEs  
- Web UI for browse, filter, install, survey, and server submission  
- IDE integrations (Cursor, Windsurf, VS Code) with deep‑link one‑click open/install  
- Basic analytics (installs, submissions, survey responses)  

**Stakeholders:**  
- **Product Manager:** Roadmap, metrics, prioritization  
- **Engineering:** Backend (ingestion, auth, analytics), Frontend (Web UI, IDE plugins)  
- **AI Integrations:** RAG & vector search  
- **QA & Security:** Auth flows, webhook security  
- **Developer Users:** End‑users discovering and contributing MCP servers  

---  
## 2. Problem Statement  
Fragmented MCP-server ecosystem:  
- Searching across scattered GitHub repos is manual and error‑prone  
- No unified install or deep‑link IDE setup  
- Lack of authenticated feedback (surveys) or user submissions  
- No centralized analytics for install counts or server popularity  

---  
## 3. User Personas  

| Persona          | Description                                   | Needs                                                        |
|------------------|-----------------------------------------------|--------------------------------------------------------------|
| **AI Engineer**  | Builds LLM‑powered pipelines                  | Fast semantic search, one‑click install, IDE integration     |
| **Full‑Stack Dev**| Embeds LLM in apps                           | Minimal boilerplate, auth‑protected submissions & surveys   |
| **Data Scientist**| Prototypes quickly                            | Search by capability, track usage analytics                  |
| **Contributor**  | Publishes new MCP servers                     | Authenticated submission form, manifest validation feedback |

---  
## 4. Goals & Success Metrics  
**Primary Goals:**  
1. **Secure Access:** Only authenticated users can install, submit servers, or complete surveys  
2. **Discoverability:** Semantic & filtered search  
3. **One‑Click Setup:** Deep‑link install & open in Web/IDE  
4. **Community Feedback:** Auth‑protected surveys per server  
5. **Analytics:** Track installs, submissions, and survey responses  

**Success Metrics (Q1 MVP):**  
- **Auth Adoption:** ≥ 150 registered users  
- **Search Sessions:** ≥ 200/week  
- **Installs:** ≥ 100/week  
- **Submissions:** ≥ 20 server contributions  
- **Time to First Install:** ≤ 2 minutes  

---  
## 5. User Flows  

1. **User Registration / Login**  
   - Access `/signup`, enter email/password, confirm via email link  
   - Login at `/login`; maintain session with JWT / secure cookie  

2. **Web Explorer & Survey**  
   - Authenticated user searches servers via keywords or NL  
   - Results list shows metadata + metrics  
   - Click “Install” to deep‑link IDE or copy snippet  
   - After install, optional prompt: “Rate your install experience” → survey modal  

3. **Server Submission**  
   - Authenticated user visits `/submit-server`, fills form: repo URL, manifest file, tags, description  
   - System validates manifest schema, clones minimal repo info, enqueues for ingestion  
   - Contributor sees dashboard: submission status (Pending → Approved)  

4. **IDE Integration**  
   - Plugin commands: `mcp.search`, `mcp.install`, `mcp.open-in-ide`  
   - One‑click in IDE opens remote workspace via protocol link (e.g., `vscode://vscode-server/?repo=<url>&path=/`)  

---  
## 6. Functional Requirements  

### 6.1 Authentication & Authorization  
- **Endpoints:** `/signup`, `/login`, `/logout`, `/me`  
- **Mechanism:** JWT-based sessions, secure HTTP-only cookies  
- **Restrictions:**  
  - Only logged‑in users can install, survey, or submit servers  
  - Public: can browse and search without credentials  

### 6.2 Data Ingestion  
- **Sources:**  
  - Official `awesome-mcp-servers` GitHub repo via webhook  
  - User submissions repo URLs  
- **Workflow:**  
  - Webhook: real‑time manifest + README fetch  
  - Nightly full sync job  
- **Fields:** `serverId`, `name`, `description`, `version`, `tags`, `repo_url`, `readme`, `last_updated`  

### 6.3 Search & Discovery  
- **Vector Store:** Pinecone for RAG over manifest+README text  
- **Capabilities:**  
  - Natural‑language queries  
  - Filters: tags, version, recency, popularity  
- **Ranking:**  
  - Primary: semantic similarity score  
  - Secondary: `install_count` desc  

### 6.4 Marketplace Web UI  
- **Pages:**  
  - **Home/Search:** search bar, filters, result cards  
  - **Server Detail:** full README, metadata, analytics chart, survey button  
  - **Submit Server:** form with live manifest validation  
  - **Survey:** modal with short feedback form (rating + comments)  
- **Components:**  
  - **Server Card:** name, desc, version, tags, install_count, “Install”, “View”  
  - **Analytics Widget:** weekly installs sparkline, survey response rate  

### 6.5 IDE Plugins (VS Code, Cursor, Windsurf)  
- **Commands:**  
  - `mcp.search <query>` → side panel results  
  - `mcp.install <serverId>` → inject `mcp.json` in workspace  
  - `mcp.open-in-ide` → deep‑link to open entire repo in current IDE  
- **IDE Deep Links:**  
  - VS Code: `vscode://vscode-remote/open?repo=<url>&folder=.`  
  - Cursor/Windsurf: platform-specific URI schemes  

### 6.6 Analytics & Reporting  
- **Events:**  
  - `search_performed` (userId, query, timestamp)  
  - `server_installed` (userId, serverId, timestamp)  
  - `server_submitted` (userId, serverId, timestamp)  
  - `survey_completed` (userId, serverId, rating, comments, timestamp)  
- **Data Store:** Postgres or DynamoDB for event logs and aggregates  
- **Dashboards:**  
  - Admin UI: installs/week, submissions/week, average survey rating  
  
---  
## 7. Data Model (MVP + Auth & Submission)  
```json
{
  "users": {
    "userId": {"email":"user@domain.com","hash":"...","role":"user"}
  },
  "servers": {
    "serverId": {
      "name":"mcp-openai-sql","description":"Query SQL via OpenAI",
      "version":"1.2.0","tags":["openai","sql"],
      "repo_url":"...","readme":"...","last_updated":"...",
      "install_count":42,"submission_status":"official|pending|approved"
    }
  },
  "events": [
    {"type":"server_installed","userId":"...","serverId":"...","ts":"..."},
    ...
  ],
  "surveys": [
    {"surveyId":"...","userId":"...","serverId":"...","rating":4,"comments":"..."}
  ]
}
```  

---  
## 8. Technical Architecture  
```
GitHub webhooks                          Analytics/UI
   ┌────▶ Ingestion Service ─┐           ┌────▶ Postgres/DynamoDB ┐
   │ (Node.js + Express)     │           │ events & aggregates    │
   └── Webhook & nightly sync┘           └────────────────────────┘
       │        │
       │        ▼
       │  Pinecone Vector Index
       ▼        ▲
  Web/API (Express) ── React UI ── Browser
        │                │
        │                └─ Submit/Summary/Survey
        │
        └─ IDE Plugins (TS) ── VSCode/Cursor/Windsurf
            mcp.search, install, open-in-ide
```

---  
## 9. Non‑Functional Requirements  
- **Performance:** search latency <300ms; install deep‑link <1s
- **Scalability:** support 5k servers, 10k searches/day, 2k installs/day
- **Availability:** 99.9% uptime for Web/API; 99% for webhooks
- **Security:** OAuth or JWT auth; HTTPS; GitHub webhook secret validation  

---  
## 10. Timeline & Milestones  

| Milestone                         | Duration | Acceptance Criteria                             |
|-----------------------------------|----------|-------------------------------------------------|
| M1: Auth & User Management        | 2w       | `/signup`, `/login`, session tests, role guard  |
| M2: Ingestion & DB Setup          | 2w       | Webhook ingest + nightly sync, tests pass       |
| M3: Search & Vector Index         | 2w       | Semantic queries return top-5; filter tests     |
| M4: Web UI – Browse + Install     | 2w       | Search UI, install button deep‑links IDE        |
| M5: Server Submission & Survey    | 2w       | Submit form, manifest validation, survey modal  |
| M6: IDE Plugins                   | 2w       | Search/install/open-in-ide in VSCode + Cursor   |
| M7: Analytics Dashboard           | 1w       | Admin metrics view for installs & surveys       |
| M8: QA & Launch                   | 1w       | End‑to‑end flow, security audit, perf tests     |

---  
## 11. Deliverables  
- Updated PRD with auth & submission flows  
- Wireframes: signup/login, submit-server, survey modal  
- OpenAPI spec: auth, ingestion, search, analytics, submissions  
- IDE plugin design doc: URI schemes, commands  
- Admin analytics dashboard mockup  

---  
## 12. Success Metrics & KPIs  
- **Registered Users:** ≥150 by MVP launch  
- **Search Usage:** ≥200 sessions/week  
- **Installs:** ≥100/week  
- **Submissions:** ≥20 new servers  
- **Survey Completion:** ≥30% response rate  
- **Time-to-Install:** Median ≤2min  

---  
## 13. Appendices  
- **A. Manifest JSON Schema**  
- **B. IDE URI Scheme Examples**  
- **C. Survey Questions Template**  